[{"C:\\Projects\\CIZFrontend\\src\\index.tsx":"1","C:\\Projects\\CIZFrontend\\src\\modules\\store.ts":"2","C:\\Projects\\CIZFrontend\\src\\App.tsx":"3","C:\\Projects\\CIZFrontend\\src\\components\\GlobalStyle.tsx":"4","C:\\Projects\\CIZFrontend\\src\\modules\\auth\\index.ts":"5","C:\\Projects\\CIZFrontend\\src\\modules\\ui\\index.ts":"6","C:\\Projects\\CIZFrontend\\src\\PrivateRoute.tsx":"7","C:\\Projects\\CIZFrontend\\src\\modules\\auth\\reducer.ts":"8","C:\\Projects\\CIZFrontend\\src\\modules\\auth\\actions.ts":"9","C:\\Projects\\CIZFrontend\\src\\components\\pages\\signup\\index.ts":"10","C:\\Projects\\CIZFrontend\\src\\components\\pages\\login\\index.tsx":"11","C:\\Projects\\CIZFrontend\\src\\components\\pages\\dashboard\\index.tsx":"12","C:\\Projects\\CIZFrontend\\src\\modules\\ui\\sidebar\\index.ts":"13","C:\\Projects\\CIZFrontend\\src\\hooks\\useAuth.ts":"14","C:\\Projects\\CIZFrontend\\src\\components\\pages\\signup\\SignUpPage.tsx":"15","C:\\Projects\\CIZFrontend\\src\\modules\\ui\\sidebar\\reducer.ts":"16","C:\\Projects\\CIZFrontend\\src\\modules\\ui\\sidebar\\actions.ts":"17","C:\\Projects\\CIZFrontend\\src\\api\\ApiClient.ts":"18","C:\\Projects\\CIZFrontend\\src\\routes.tsx":"19"},{"size":361,"mtime":1612172832458,"results":"20","hashOfConfig":"21"},{"size":277,"mtime":1612263281182,"results":"22","hashOfConfig":"21"},{"size":1237,"mtime":1612349907690,"results":"23","hashOfConfig":"21"},{"size":279,"mtime":1612263642428,"results":"24","hashOfConfig":"21"},{"size":190,"mtime":1612263301937,"results":"25","hashOfConfig":"21"},{"size":244,"mtime":1612172832462,"results":"26","hashOfConfig":"21"},{"size":1791,"mtime":1612347260405,"results":"27","hashOfConfig":"21"},{"size":436,"mtime":1612348479009,"results":"28","hashOfConfig":"21"},{"size":268,"mtime":1612348467127,"results":"29","hashOfConfig":"21"},{"size":70,"mtime":1612263268962,"results":"30","hashOfConfig":"21"},{"size":995,"mtime":1612349213640,"results":"31","hashOfConfig":"21"},{"size":124,"mtime":1612263245750,"results":"32","hashOfConfig":"21"},{"size":226,"mtime":1612263344281,"results":"33","hashOfConfig":"21"},{"size":318,"mtime":1612263289024,"results":"34","hashOfConfig":"21"},{"size":1021,"mtime":1612347379655,"results":"35","hashOfConfig":"21"},{"size":574,"mtime":1612349084991,"results":"36","hashOfConfig":"21"},{"size":434,"mtime":1612349100399,"results":"37","hashOfConfig":"21"},{"size":14129,"mtime":1612263408910,"results":"38","hashOfConfig":"21"},{"size":197,"mtime":1612349698101,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"gox1xa",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Projects\\CIZFrontend\\src\\index.tsx",[],["86","87","88","89","90","91","92","93","94"],"C:\\Projects\\CIZFrontend\\src\\modules\\store.ts",["95","96"],"import { createStore, combineReducers } from 'redux';\r\n\r\nimport ui, { UiState } from './ui';\r\nimport auth, { AuthState } from './auth';\r\n\r\nexport interface Store {\r\n    ui: UiState;\r\n    auth: AuthState;\r\n}\r\n\r\nexport default createStore(combineReducers<Store>({ ui, auth }));\r\n","C:\\Projects\\CIZFrontend\\src\\App.tsx",["97","98","99","100","101"],"import React, { Suspense } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport moment from 'moment';\r\n\r\nimport LoginPage from 'components/pages/login';\r\nimport SignUpPage from 'components/pages/signup';\r\nimport PrivateRoute from 'PrivateRoute';\r\nimport Dashboard from 'components/pages/dashboard';\r\nimport routes from './routes';\r\n// momentの日本語設定\r\nmoment.locale('ja', {\r\n  months: ['１月', '2月', '3月', '4月', '5月', '６月', '７月', '８月', '９月', '１０月', '１１月', '１２月'],\r\n  weekdays: ['日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'],\r\n  weekdaysShort: ['日', '月', '火', '水', '木', '金', '土'],\r\n});\r\n\r\nconst App: React.FC = () => (\r\n  <Suspense fallback=\"loading\">\r\n    <Router>\r\n      <Switch>\r\n        {routes.map((route:any) => <route.component {...route} />)}\r\n        {/* <Route exact={true} path=\"/\">\r\n          <LoginPage />\r\n        </Route>\r\n        <Route exact={true} path=\"/signup\">\r\n          <SignUpPage />\r\n        </Route>\r\n        <PrivateRoute>\r\n          <Dashboard />\r\n        </PrivateRoute> */}\r\n      </Switch>\r\n    </Router>\r\n  </Suspense>\r\n);\r\n\r\nexport default App;\r\n","C:\\Projects\\CIZFrontend\\src\\components\\GlobalStyle.tsx",[],"C:\\Projects\\CIZFrontend\\src\\modules\\auth\\index.ts",[],"C:\\Projects\\CIZFrontend\\src\\modules\\ui\\index.ts",["102"],"import { combineReducers } from 'redux';\r\n\r\nimport sidebar, { UiSidebarState } from './sidebar';\r\n\r\nexport interface UiState {\r\n  sidebar: UiSidebarState;\r\n}\r\n\r\nconst reducer = combineReducers<UiState>({ sidebar });\r\n\r\nexport default reducer;\r\n","C:\\Projects\\CIZFrontend\\src\\PrivateRoute.tsx",["103"],"C:\\Projects\\CIZFrontend\\src\\modules\\auth\\reducer.ts",["104","105"],"import { Actions, types } from './actions';\r\nimport { AuthState } from '.';\r\n\r\nconst initialState: AuthState = {\r\n  isAuth: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action: Actions): AuthState => {\r\n  const newState = { ...state };\r\n  switch (action.type) {\r\n    case types.SET_IS_AUTH:\r\n      newState.isAuth = action.payload;\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","C:\\Projects\\CIZFrontend\\src\\modules\\auth\\actions.ts",[],"C:\\Projects\\CIZFrontend\\src\\components\\pages\\signup\\index.ts",[],"C:\\Projects\\CIZFrontend\\src\\components\\pages\\login\\index.tsx",[],"C:\\Projects\\CIZFrontend\\src\\components\\pages\\dashboard\\index.tsx",[],"C:\\Projects\\CIZFrontend\\src\\modules\\ui\\sidebar\\index.ts",[],"C:\\Projects\\CIZFrontend\\src\\hooks\\useAuth.ts",[],"C:\\Projects\\CIZFrontend\\src\\components\\pages\\signup\\SignUpPage.tsx",[],"C:\\Projects\\CIZFrontend\\src\\modules\\ui\\sidebar\\reducer.ts",["106","107"],"import { types, Actions } from './actions';\r\nimport { UiSidebarState } from '.';\r\n\r\nconst initialState: UiSidebarState = {\r\n  isOpen: true,\r\n  hierarchy: undefined,\r\n};\r\n\r\nconst reducer = (state = initialState, action: Actions): UiSidebarState => {\r\n  const newState = { ...state };\r\n  switch (action.type) {\r\n    case types.SET_IS_OPEN:\r\n      newState.isOpen = action.payload;\r\n      return newState;\r\n    case types.SET_HIERARCHY:\r\n      newState.hierarchy = action.payload;\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","C:\\Projects\\CIZFrontend\\src\\modules\\ui\\sidebar\\actions.ts",[],"C:\\Projects\\CIZFrontend\\src\\api\\ApiClient.ts",["108","109"],"/* eslint-disable global-require */\r\nimport axios, { AxiosResponse, AxiosRequestConfig } from 'axios';\r\nimport { stringify } from 'qs';\r\nimport { saveAs } from 'file-saver';\r\n\r\ntype QueryObject = {[key: string]: string|number|boolean}\r\n\r\n// const domainUrl = 'http://localhost:8080';\r\nconst domainUrl = process.env.REACT_APP_API_BASE_URL;\r\n// const validateStatus = (status: number) => status < 500;\r\n\r\nexport default class ApiClient {\r\n  /**\r\n   * GETリクエスト\r\n   *\r\n   * @param url リクエストURL\r\n   * @param params GETパラメータ\r\n   */\r\n  static async get(\r\n    url: string, params: object, query?: undefined|{[key: string]: string}|string,\r\n  ): Promise<AxiosResponse> {\r\n    let requestUrl = query ? `${url}?${stringify(query)}` : url;\r\n    if (typeof query === 'string') {\r\n      requestUrl = `${url}?${query}`;\r\n    }\r\n    const response = await axios.get(domainUrl + requestUrl, {\r\n      params,\r\n      headers: await this.getHeaders(),\r\n      // validateStatus,\r\n      // @see https://github.com/axios/axios/issues/86#issuecomment-311788525\r\n      data: {},\r\n    });\r\n\r\n    return response;\r\n  }\r\n\r\n  static async getNoAuth(\r\n    shopCode: string, url: string, params: object, query?: undefined|{[key: string]: string}|string,\r\n  ): Promise<AxiosResponse> {\r\n    let requestUrl = query ? `${url}?${stringify(query)}` : url;\r\n    if (typeof query === 'string') {\r\n      requestUrl = `${url}?${query}`;\r\n    }\r\n    const response = await axios.get(domainUrl + requestUrl, {\r\n      params,\r\n      headers: await this.getHeadersNoAuth('application/x-www-form-urlencoded', shopCode),\r\n      // validateStatus,\r\n      // @see https://github.com/axios/axios/issues/86#issuecomment-311788525\r\n      data: {},\r\n    });\r\n\r\n    return response;\r\n  }\r\n\r\n  static async getNoAuthV2(\r\n    url: string,\r\n  ): Promise<AxiosResponse> {\r\n    const requestUrl = url;\r\n    const response = await axios.get(domainUrl + requestUrl, {\r\n    });\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * GETリクエスト\r\n   * 自分のドメインのURLにリクエストを投げる\r\n   *\r\n   * @param url リクエストURL\r\n   * @param params GETパラメータ\r\n   */\r\n  static async getOrgDomain(\r\n    url: string, params: object, query?: undefined|{[key: string]: string}|string,\r\n  ): Promise<AxiosResponse> {\r\n    let requestUrl = query ? `${url}?${stringify(query)}` : url;\r\n    if (typeof query === 'string') {\r\n      requestUrl = `${url}?${query}`;\r\n    }\r\n    const response = await axios.get(requestUrl, {\r\n      params,\r\n      headers: await this.getHeaders(),\r\n      // validateStatus,\r\n      // @see https://github.com/axios/axios/issues/86#issuecomment-311788525\r\n      data: {},\r\n    });\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * GETリクエスト\r\n   * 自分のドメインのURLにリクエストを投げる\r\n   *\r\n   * @param url リクエストURL\r\n   * @param params GETパラメータ\r\n   */\r\n  static async getOrgDomain2(\r\n    url: string, params: object, query?: undefined|{[key: string]: string}|string,\r\n  ): Promise<AxiosResponse> {\r\n    let requestUrl = query ? `${url}?${stringify(query)}` : url;\r\n    if (typeof query === 'string') {\r\n      requestUrl = `${url}?${query}`;\r\n    }\r\n    const response = await axios.get(requestUrl, {\r\n      params,\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      // validateStatus,\r\n      // @see https://github.com/axios/axios/issues/86#issuecomment-311788525\r\n      data: {},\r\n    });\r\n\r\n    return response;\r\n  }\r\n\r\n  static async getDownloadFile(\r\n    url: string, params: object, query?: undefined|{[key: string]: string}|string,\r\n  ): Promise<AxiosResponse> {\r\n    let requestUrl = query ? `${url}?${stringify(query)}` : url;\r\n    if (typeof query === 'string') {\r\n      requestUrl = `${url}?${query}`;\r\n    }\r\n    const response = await axios.get(domainUrl + requestUrl, {\r\n      params,\r\n      headers: await this.getHeaders(),\r\n      // validateStatus,\r\n      // @see https://github.com/axios/axios/issues/86#issuecomment-311788525\r\n      data: {},\r\n      responseType: 'blob',\r\n    });\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * POSTリクエスト\r\n   *\r\n   * @param url リクエストURL\r\n   * @param params リクエストパラメータ\r\n   */\r\n  static async post(url: string, query: QueryObject, params: any, appendUrl?: string): Promise<AxiosResponse> {\r\n    const requestUrl = `${url}?${stringify(query)}${appendUrl || ''}`;\r\n\r\n    const config : AxiosRequestConfig = {\r\n      headers: await this.getHeaders(),\r\n      // validateStatus,\r\n    };\r\n\r\n    const param = this.convertToPostData(params, undefined, undefined);\r\n    const response = await axios.post(domainUrl + requestUrl, param, config);\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * POSTリクエスト(ログイン履歴用)\r\n   *\r\n   * @param url リクエストURL\r\n   * @param params リクエストパラメータ\r\n   */\r\n  static async postLoginHistory(url: string, query: QueryObject, params: any, appendUrl?: string): Promise<AxiosResponse> {\r\n    const requestUrl = `${url}?${stringify(query)}${appendUrl || ''}`;\r\n\r\n    const config : AxiosRequestConfig = {\r\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n      // validateStatus,\r\n    };\r\n\r\n    const param = this.convertToPostData(params, undefined, undefined);\r\n    const response = await axios.post(domainUrl + requestUrl, param, config);\r\n    return response;\r\n  }\r\n\r\n  static async postJsonData(url: string, query: QueryObject, params: any): Promise<AxiosResponse> {\r\n    const requestUrl = `${url}?${stringify(query)}`;\r\n\r\n    const config : AxiosRequestConfig = {\r\n      headers: await this.getHeaders('application/json'),\r\n      // validateStatus,\r\n    };\r\n\r\n    const response = await axios.post(domainUrl + requestUrl, params, config);\r\n    return response;\r\n  }\r\n\r\n  static async putJsonData(url: string, query: QueryObject, params: any): Promise<AxiosResponse> {\r\n    const requestUrl = `${url}?${stringify(query)}`;\r\n\r\n    const config : AxiosRequestConfig = {\r\n      headers: await this.getHeaders('application/json'),\r\n      // validateStatus,\r\n    };\r\n\r\n    const response = await axios.put(domainUrl + requestUrl, params, config);\r\n    return response;\r\n  }\r\n\r\n  static async postMutipartData(\r\n    url: string, query: QueryObject, params: any,\r\n  ): Promise<AxiosResponse> {\r\n    const requestUrl = `${url}?${stringify(query)}`;\r\n\r\n    const config : AxiosRequestConfig = {\r\n      headers: await this.getHeaders('multipart/form-data'),\r\n      // validateStatus,\r\n    };\r\n    const form = new FormData();\r\n    const param = this.convertToPostData(params, form, undefined);\r\n    const response = await axios.post(domainUrl + requestUrl, param, config);\r\n    return response;\r\n  }\r\n\r\n  // static async postMutipartDatastr(\r\n  //   url: string, query: string, params: any,\r\n  // ): Promise<AxiosResponse> {\r\n  //   const requestUrl = `${url}?${query}`;\r\n\r\n  //   const config : AxiosRequestConfig = {\r\n  //     headers: await this.getHeaders('multipart/form-data'),\r\n  //     // validateStatus,\r\n  //   };\r\n  //   const form = new FormData();\r\n  //   const param = this.convertToPostData(params, form, undefined);\r\n  //   const response = await axios.post(domainUrl + requestUrl, param, config);\r\n  //   return response;\r\n  // }\r\n\r\n  static async postMutipartDataNoAuth(\r\n    url: string, query: QueryObject, params: any, shopCode: string,\r\n  ): Promise<AxiosResponse> {\r\n    const requestUrl = `${url}?${stringify(query)}`;\r\n\r\n    const config : AxiosRequestConfig = {\r\n      headers: await this.getHeadersNoAuth('multipart/form-data', shopCode),\r\n      // validateStatus,\r\n    };\r\n    const form = new FormData();\r\n    const param = this.convertToPostData(params, form, undefined);\r\n    const response = await axios.post(domainUrl + requestUrl, param, config);\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * POSTリクエスト\r\n   *\r\n   * @param url リクエストURL\r\n   * @param params リクエストパラメータ\r\n   */\r\n  static async postOriginalData(url: string, query: QueryObject, params: any):\r\n  Promise<AxiosResponse> {\r\n    const requestUrl = `${url}?${stringify(query)}`;\r\n\r\n    const config : AxiosRequestConfig = {\r\n      headers: await this.getHeaders(),\r\n      // validateStatus,\r\n    };\r\n\r\n    const response = await axios.post(domainUrl + requestUrl, params, config);\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * DELETE\r\n   *\r\n   * @param url\r\n   * @param params\r\n   */\r\n  static async delete(url: string, params: any): Promise<AxiosResponse> {\r\n    const requestUrl = `${url}?${stringify(params)}`;\r\n\r\n    const config : AxiosRequestConfig = {\r\n      headers: await this.getHeaders(),\r\n      // validateStatus,\r\n    };\r\n\r\n    const response = await axios.delete(domainUrl + requestUrl, config);\r\n    return response;\r\n  }\r\n\r\n  static async postFile(\r\n    url: string, query: QueryObject, fileKey: string, file: File,\r\n  ): Promise<AxiosResponse> {\r\n    const requestUrl = `${url}?${stringify(query)}`;\r\n\r\n    const config : AxiosRequestConfig = {\r\n      headers: await this.getHeaders(),\r\n      // validateStatus,\r\n    };\r\n\r\n    const formData = new FormData();\r\n    formData.append(fileKey, file);\r\n    const response = await axios.post(domainUrl + requestUrl, formData, config);\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * CSVファイルダウンロード\r\n   */\r\n  static async downloadCsv(url: string, query: object, downloadFileName: string) {\r\n    const response = await this.get(url, query, undefined);\r\n    const bom = new Uint8Array([0xEF, 0xBB, 0xBF]);\r\n    const blob = new Blob([bom, response.data], {\r\n      type: 'text/csv',\r\n    });\r\n    saveAs(blob, downloadFileName);\r\n  }\r\n\r\n  static async downloadCsvNoConvert(url: string, query: object, downloadFileName: string) {\r\n    const response = await this.getDownloadFile(url, query, undefined);\r\n    saveAs(response.data, downloadFileName);\r\n  }\r\n\r\n  /**\r\n   * CSVファイルダウンロード\r\n   */\r\n  static async downloadOriginalCsv(url: string, query: string|undefined, downloadFileName: string) {\r\n    const response = await this.get(url, {}, query);\r\n    const bom = new Uint8Array([0xEF, 0xBB, 0xBF]);\r\n    const blob = new Blob([bom, response.data], {\r\n      type: 'text/csv',\r\n    });\r\n    saveAs(blob, downloadFileName);\r\n  }\r\n\r\n  static async downloadCsvPost(url: string, query: QueryObject, params: any,\r\n    downloadFileName: string) {\r\n    const requestUrl = `${url}`;\r\n    const response = await this.postDownloadFile(domainUrl + requestUrl, JSON.stringify(params));\r\n    saveAs(response.data, downloadFileName);\r\n  }\r\n\r\n  static async postDownloadFile(\r\n    url: string, params: any, query?: undefined|{[key: string]: string}|string,\r\n  ): Promise<AxiosResponse> {\r\n    let requestUrl = query ? `${url}?${stringify(query)}` : url;\r\n    if (typeof query === 'string') {\r\n      requestUrl = `${url}?${query}`;\r\n    }\r\n\r\n    const config : AxiosRequestConfig = {\r\n      headers: await this.getHeaders('application/json'),\r\n      responseType: 'blob',\r\n    };\r\n    const response = await axios.post(requestUrl, params, config);\r\n    return response;\r\n  }\r\n\r\n  static async downloadExcelPost(url: string, query: QueryObject, params: any,\r\n    downloadFileName: string) {\r\n    const requestUrl = `${url}?${stringify(query)}`;\r\n    const config : AxiosRequestConfig = {\r\n      headers: await this.getHeaders('application/json'),\r\n      responseType: 'blob',\r\n    };\r\n    const response = await axios.post(domainUrl + requestUrl, JSON.stringify(params), config);\r\n\r\n    const blob = new Blob([response.data], {\r\n      type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;',\r\n    });\r\n    saveAs(blob, downloadFileName);\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * headersを取得\r\n   */\r\n  private static async getHeaders(contentType : string = 'application/x-www-form-urlencoded') {\r\n    return {\r\n      'Content-Type': contentType,\r\n      authorization: await this.getToken(),\r\n    };\r\n  }\r\n\r\n  private static async getHeadersNoAuth(contentType : string = 'application/x-www-form-urlencoded', shopCode: string) {\r\n    return {\r\n      'Content-Type': contentType,\r\n      'x-ymoky-shop-code': shopCode,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * accessTokenを取得\r\n   */\r\n  private static async getToken() {\r\n    // const cognitoUser = await Auth.currentAuthenticatedUser();\r\n    // const currentSession = await Auth.currentSession();\r\n\r\n    // const accessToken = await currentSession.getAccessToken();\r\n    // const idToken = await currentSession.getIdToken();\r\n    // const refreshToken = await currentSession.getRefreshToken();\r\n    // if (!accessToken || !refreshToken) {\r\n    // if (!idToken) {\r\n    //   window.location.replace('/expire');\r\n    // }\r\n\r\n    // refreshTokenの検証\r\n    // cognitoUser.refreshSession(refreshToken, (err: any, session: any) => {\r\n    //   if (err) {\r\n    //     // refreshに失敗したら強制的にエラー画面に飛ばす\r\n    //     // window.location.replace('/expire');\r\n    //   }\r\n    // });\r\n\r\n    // return accessToken.getJwtToken();\r\n    // return idToken.getJwtToken();\r\n    return 'token';\r\n  }\r\n\r\n  private static convertToPostData(obj: any, form: any, namespace: any) {\r\n    const fd = form || new URLSearchParams();\r\n    let formKey;\r\n\r\n    for (const property in obj) {\r\n      // eslint-disable-next-line no-prototype-builtins\r\n      if (obj.hasOwnProperty(property)) {\r\n        if (namespace) {\r\n          if (!isNaN(Number(property))) {\r\n            formKey = `${namespace}[${property}]`;\r\n          } else {\r\n            formKey = `${namespace}.${property}`;\r\n          }\r\n        } else {\r\n          formKey = property;\r\n        }\r\n\r\n        if (obj[property] instanceof Date) {\r\n          fd.append(formKey, obj[property].toISOString());\r\n        } else if (typeof obj[property] === 'object'\r\n                && !(obj[property] instanceof File)\r\n                && !(obj[property] instanceof Blob)) {\r\n          this.convertToPostData(obj[property], fd, formKey);\r\n        } else {\r\n          fd.append(formKey, obj[property]);\r\n        }\r\n      }\r\n    }\r\n    return fd;\r\n  }\r\n}\r\n",["110","111","112","113","114","115","116","117","118"],"C:\\Projects\\CIZFrontend\\src\\routes.tsx",[],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":3,"column":14,"nodeType":"139","messageId":"140","endLine":3,"endColumn":21},{"ruleId":"137","severity":1,"message":"141","line":4,"column":16,"nodeType":"139","messageId":"140","endLine":4,"endColumn":25},{"ruleId":"137","severity":1,"message":"142","line":2,"column":43,"nodeType":"139","messageId":"140","endLine":2,"endColumn":48},{"ruleId":"137","severity":1,"message":"143","line":6,"column":8,"nodeType":"139","messageId":"140","endLine":6,"endColumn":17},{"ruleId":"137","severity":1,"message":"144","line":7,"column":8,"nodeType":"139","messageId":"140","endLine":7,"endColumn":18},{"ruleId":"137","severity":1,"message":"145","line":8,"column":8,"nodeType":"139","messageId":"140","endLine":8,"endColumn":20},{"ruleId":"137","severity":1,"message":"146","line":9,"column":8,"nodeType":"139","messageId":"140","endLine":9,"endColumn":17},{"ruleId":"137","severity":1,"message":"147","line":3,"column":19,"nodeType":"139","messageId":"140","endLine":3,"endColumn":33},{"ruleId":"137","severity":1,"message":"148","line":3,"column":10,"nodeType":"139","messageId":"140","endLine":3,"endColumn":20},{"ruleId":"137","severity":1,"message":"149","line":1,"column":10,"nodeType":"139","messageId":"140","endLine":1,"endColumn":17},{"ruleId":"137","severity":1,"message":"141","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":19},{"ruleId":"137","severity":1,"message":"149","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":24},{"ruleId":"137","severity":1,"message":"147","line":2,"column":10,"nodeType":"139","messageId":"140","endLine":2,"endColumn":24},{"ruleId":"137","severity":1,"message":"150","line":2,"column":17,"nodeType":"139","messageId":"140","endLine":2,"endColumn":30},{"ruleId":"137","severity":1,"message":"151","line":2,"column":32,"nodeType":"139","messageId":"140","endLine":2,"endColumn":50},{"ruleId":"119","replacedBy":"152"},{"ruleId":"121","replacedBy":"153"},{"ruleId":"123","replacedBy":"154"},{"ruleId":"125","replacedBy":"155"},{"ruleId":"127","replacedBy":"156"},{"ruleId":"129","replacedBy":"157"},{"ruleId":"131","replacedBy":"158"},{"ruleId":"133","replacedBy":"159"},{"ruleId":"135","replacedBy":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"jsx-a11y/accessible-emoji",[],"lines-around-directive",["163"],"no-spaced-func",["164"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'UiState' is defined but never used.","Identifier","unusedVar","'AuthState' is defined but never used.","'Route' is defined but never used.","'LoginPage' is defined but never used.","'SignUpPage' is defined but never used.","'PrivateRoute' is defined but never used.","'Dashboard' is defined but never used.","'UiSidebarState' is defined but never used.","'RouteProps' is defined but never used.","'Actions' is defined but never used.","'AxiosResponse' is defined but never used.","'AxiosRequestConfig' is defined but never used.",["161"],["162"],[],["163"],["164"],[],[],[],[],"no-global-assign","no-unsafe-negation","padding-line-between-statements","func-call-spacing"]